import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,b as a,e as r,f as n,o as t}from"./app-sTD1ZwdD.js";const h="/assets/image-20241125101240437-DYDd3bL7.png",p="/assets/image-20241125123527273-C3Xh1WJ2.png",d="/assets/image-20241125123642046-BUKrGV8P.png",o="/assets/image-20241125123101958-BDEsL4_B.png",k={},Q={class:"MathJax",jax:"SVG",style:{position:"relative"}},T={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.174ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 1845 1000","aria-hidden":"true"},g={class:"MathJax",jax:"SVG",style:{position:"relative"}},m={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.013ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3541.7 1000","aria-hidden":"true"},A={class:"MathJax",jax:"SVG",style:{position:"relative"}},c={style:{"vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.74ex",height:"1.595ex",role:"img",focusable:"false",viewBox:"0 -683 769 705","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{position:"relative"}},y={style:{"vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.729ex",height:"1.538ex",role:"img",focusable:"false",viewBox:"0 -680 764 680","aria-hidden":"true"},B={class:"MathJax",jax:"SVG",style:{position:"relative"}},v={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.294ex",height:"1.025ex",role:"img",focusable:"false",viewBox:"0 -442 572 453","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{position:"relative"}},f={style:{"vertical-align":"-0.025ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.097ex",height:"1.027ex",role:"img",focusable:"false",viewBox:"0 -443 485 454","aria-hidden":"true"},F={class:"MathJax",jax:"SVG",style:{position:"relative"}},x={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.158ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2279.7 1000","aria-hidden":"true"},D={class:"MathJax",jax:"SVG",style:{position:"relative"}},w={style:{"vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.729ex",height:"1.538ex",role:"img",focusable:"false",viewBox:"0 -680 764 680","aria-hidden":"true"},C={style:{"text-align":"center"}},H={class:"MathJax",jax:"SVG",style:{position:"relative"}},M={style:{"vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"3.409ex",height:"1.464ex",role:"img",focusable:"false",viewBox:"0 -442 1506.7 647","aria-hidden":"true"},L={class:"MathJax",jax:"SVG",style:{position:"relative"}},E={style:{"vertical-align":"-0.464ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.354ex",height:"1.817ex",role:"img",focusable:"false",viewBox:"0 -598 5902.6 803","aria-hidden":"true"};function z(S,s){return t(),l("div",null,[s[37]||(s[37]=i("blockquote",null,[i("p",null,[i("strong",null,"背景回顾"),a("：我们已经了解常见的并发 bug 类型：死锁、数据竞争、原子性/顺序违反。与此同时，在编程时消灭并发 bug 仍然是一个世界性的难题。那么，我们应该如何应对这些并发 bugs？")])],-1)),s[38]||(s[38]=i("p",null,[i("strong",null,"本讲内容"),a("："),i("strong",null,"另一节真正的实用 “编程” 课"),a(" —— 如何正确地 (并发) 编程：应对三种常见的 “死亡” 方式：")],-1)),s[39]||(s[39]=i("ul",null,[i("li",null,"死锁 (deadlock)"),i("li",null,"死局 (软件危机中的 dead end)"),i("li",null,"死线 (deadline)")],-1)),r(" more -"),s[40]||(s[40]=n('<h2 id="应对死锁" tabindex="-1"><a class="header-anchor" href="#应对死锁"><span>应对死锁</span></a></h2><p>死锁其实是一类比较 &quot;容易&quot; 且 &quot;明确&quot; 的并发 bug :</p><ul><li>它容易被观测</li><li>针对避免该 bug 的正确性具有明确的标准： <ul><li>任何线程在 “基本合理” 的调度下，不能失去进展</li></ul></li><li>它甚至有明确的必要条件 <ul><li>Mutual-exclusion - 一个口袋一个球，得到球才能继续</li><li>Wait-for - 得到球的人想要更多的球</li><li>No-preemption - 不能抢别人的持有的球</li><li>Circular-chain - 形成循环等待球的关系 (相对容易破坏的条件)</li></ul></li><li>...</li></ul><p>为了避免死锁，我们在上节课也提到了可以采用 <em><strong>Lock Ordering</strong></em> 的方式来保证至少有一个线程可以执行。</p><p>对 <em><strong>Lock Ordering</strong></em> 的一个典型应用就是 Linux 中的 <code>mm/rmap.c</code>：</p><figure><img src="'+h+'" alt="mm/rmap.c" tabindex="0" loading="lazy"><figcaption>mm/rmap.c</figcaption></figure><p>你会发现，为了追求性能与程序正确性之间的平衡，我们似乎正在走入一个死局：</p><p><strong>一面是复杂的系统，另一面是不可靠的人</strong></p><ul><li>我们希望的 <ul><li>标记 “做一件事” 不被打断</li></ul></li><li>实际需要做的 <ul><li>“做一件事” 需要拆解成多个步骤</li><li>每个步骤需要上正确 (而且尽可能少) 的锁</li><li>↑ 为了程序的高性能，我们带来了诸多复杂性...这些复杂性使得我们程序的正确性更加难以验证</li></ul></li></ul><h2 id="应对死局-——-绝处逢生" tabindex="-1"><a class="header-anchor" href="#应对死局-——-绝处逢生"><span>应对死局 —— 绝处逢生</span></a></h2><p>应对上述正确性的死局，程序员们想到了一个能够自救的办法：</p><p>在 <strong>运行时</strong> 检查 bugs 的 <strong>Specifications</strong> 就可以了：</p><ul><li>AA/ABBA 型死锁</li><li>数据竞争</li><li>带符号整数溢出 (undefined behavior)</li><li>Use after free</li><li>……</li></ul><p>实际上，我们在调试的时候，也会使用各种方式 (包括但不限于 <code>printf</code>、 <code>display</code> 、 <code>bt</code> 等) 查看状态机内部的一些信息或者调用堆栈等等。</p><p>归根结底，我们在使用这些方式调试的时候都是想知道状态机在哪几步可能出现了问题 —— 我们在观测状态机某一时刻的状态与历史的状态轨迹。</p><p>因此，我们引入了 <strong>动态程序分析</strong> 这一 &quot;自动化&quot; 自救方法：</p>',16)),i("p",null,[s[2]||(s[2]=a("(每次状态迁移时，) 调用以 ")),s[3]||(s[3]=i("strong",null,"状态机执行历史",-1)),s[4]||(s[4]=a(" 为输入的分析函数 ")),i("mjx-container",Q,[(t(),l("svg",T,s[0]||(s[0]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mo" transform="translate(550,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(939,0)"><path data-c="1D70F" d="M39 284Q18 284 18 294Q18 301 45 338T99 398Q134 425 164 429Q170 431 332 431Q492 431 497 429Q517 424 517 402Q517 388 508 376T485 360Q479 358 389 358T299 356Q298 355 283 274T251 109T233 20Q228 5 215 -4T186 -13Q153 -13 153 20V30L203 192Q214 228 227 272T248 336L254 357Q254 358 208 358Q206 358 197 358T183 359Q105 359 61 295Q56 287 53 286T39 284Z"></path></g><g data-mml-node="mo" transform="translate(1456,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),s[1]||(s[1]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"f"),i("mo",{stretchy:"false"},"("),i("mi",null,"τ"),i("mo",{stretchy:"false"},")")])],-1))]),s[5]||(s[5]=a(" 来检查 bugs 对应的 ")),s[6]||(s[6]=i("strong",null,"Specifications",-1)),s[7]||(s[7]=a(" ："))]),s[41]||(s[41]=i("ul",null,[i("li",null,"虽然要付出程序执行变慢的代价"),i("li",null,"但是可以帮我们找到更多 bugs")],-1)),s[42]||(s[42]=i("h3",{id:"运行时的死锁检查",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#运行时的死锁检查"},[i("span",null,"运行时的死锁检查")])],-1)),s[43]||(s[43]=i("p",null,[a('由于 "AA" 型死锁我们可以通过类似于 '),i("em",null,"xv6"),a(' 中的防御性编程来实现检查，那么剩下需要检查的死锁仅为 "ABBA" 型。')],-1)),s[44]||(s[44]=i("p",null,[a('"ABBA" 型死锁的锁获取顺序 '),i("strong",null,"在图的意义上是个环"),a("，因此我们有一个想法：")],-1)),i("ul",null,[s[30]||(s[30]=i("li",null,[a("为每一个 "),i("em",null,"acquire"),a(" / "),i("em",null,"release"),a(" 记录 "),i("code",null,"tid"),a(" 和 "),i("code",null,"lock_name"),a(" (记录线程上锁/解锁的信息)")],-1)),i("li",null,[s[28]||(s[28]=a("Assert: ")),i("mjx-container",g,[(t(),l("svg",m,s[8]||(s[8]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D43A" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q492 659 471 656T418 643T357 615T294 567T236 496T189 394T158 260Q156 242 156 221Q156 173 170 136T206 79T256 45T308 28T353 24Q407 24 452 47T514 106Q517 114 529 161T541 214Q541 222 528 224T468 227H431Q425 233 425 235T427 254Q431 267 437 273H454Q494 271 594 271Q634 271 659 271T695 272T707 272Q721 272 721 263Q721 261 719 249Q714 230 709 228Q706 227 694 227Q674 227 653 224Q646 221 643 215T629 164Q620 131 614 108Q589 6 586 3Q584 1 581 1Q571 1 553 21T530 52Q530 53 528 52T522 47Q448 -22 322 -22Q201 -22 126 55T50 252Z"></path></g><g data-mml-node="mo" transform="translate(786,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1175,0)"><path data-c="1D449" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g><g data-mml-node="mo" transform="translate(1944,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(2388.7,0)"><path data-c="1D438" d="M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"></path></g><g data-mml-node="mo" transform="translate(3152.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),s[9]||(s[9]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"G"),i("mo",{stretchy:"false"},"("),i("mi",null,"V"),i("mo",null,","),i("mi",null,"E"),i("mo",{stretchy:"false"},")")])],-1))]),s[29]||(s[29]=a(" 无成环 ")),i("ul",null,[i("li",null,[i("mjx-container",A,[(t(),l("svg",c,s[10]||(s[10]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D449",d:"M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"})])])],-1)]))),s[11]||(s[11]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"V")])],-1))]),s[12]||(s[12]=a(": 所有的 ")),s[13]||(s[13]=i("code",null,"lock_name",-1))]),i("li",null,[i("mjx-container",u,[(t(),l("svg",y,s[14]||(s[14]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D438",d:"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"})])])],-1)]))),s[15]||(s[15]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"E")])],-1))]),s[24]||(s[24]=a(": 每当观测到持有 ")),i("mjx-container",B,[(t(),l("svg",v,s[16]||(s[16]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D462",d:"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"})])])],-1)]))),s[17]||(s[17]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"u")])],-1))]),s[25]||(s[25]=a(" 时获取 ")),i("mjx-container",b,[(t(),l("svg",f,s[18]||(s[18]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D463",d:"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"})])])],-1)]))),s[19]||(s[19]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"v")])],-1))]),s[26]||(s[26]=a(" 就把 ")),i("mjx-container",F,[(t(),l("svg",x,s[20]||(s[20]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(961,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1405.7,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1890.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),s[21]||(s[21]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mo",{stretchy:"false"},"("),i("mi",null,"u"),i("mo",null,","),i("mi",null,"v"),i("mo",{stretchy:"false"},")")])],-1))]),s[27]||(s[27]=a(" 加入 ")),i("mjx-container",D,[(t(),l("svg",w,s[22]||(s[22]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("path",{"data-c":"1D438",d:"M492 213Q472 213 472 226Q472 230 477 250T482 285Q482 316 461 323T364 330H312Q311 328 277 192T243 52Q243 48 254 48T334 46Q428 46 458 48T518 61Q567 77 599 117T670 248Q680 270 683 272Q690 274 698 274Q718 274 718 261Q613 7 608 2Q605 0 322 0H133Q31 0 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H757Q764 676 764 669Q764 664 751 557T737 447Q735 440 717 440H705Q698 445 698 453L701 476Q704 500 704 528Q704 558 697 578T678 609T643 625T596 632T532 634H485Q397 633 392 631Q388 629 386 622Q385 619 355 499T324 377Q347 376 372 376H398Q464 376 489 391T534 472Q538 488 540 490T557 493Q562 493 565 493T570 492T572 491T574 487T577 483L544 351Q511 218 508 216Q505 213 492 213Z"})])])],-1)]))),s[23]||(s[23]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"E")])],-1))])])])])]),s[45]||(s[45]=n(`<div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="记录线程上锁/解锁信息" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T1 ACQ a</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T1 ACQ b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T1 REL b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T2 ACQ b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">T2 REL b</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那我们只需要动态维护锁的持有图，并且时刻检查锁持有图中 <strong>是否存在环</strong>，就可以得到我们的 <strong>运行时死锁检查程序</strong>！</p><div class="hint-container info"><p class="hint-container-title">如果想要更高效一些呢?</p><ul><li>真的需要时刻动态维护结点吗？</li><li>真的需要时刻检查图中是否成环吗？</li><li>这样的开销会不会非常大？</li></ul><details class="hint-container details"><summary>&quot;工程师的智慧&quot;</summary><ul><li>将每个文件中每一行上的锁 <strong>全部认为是一个锁</strong><ul><li>(待解答：为什么这么做是可行的，而不用去管具体的线程信息? 😵 ) <ul><li>也许不用管具体的调度？只需要明确存在一个可能的调度序列能够产生死锁即可？</li></ul></li></ul></li></ul><figure><img src="`+p+'" alt="将每个文件中每一行上的锁全部认为是一个锁" tabindex="0" loading="lazy"><figcaption>将每个文件中每一行上的锁全部认为是一个锁</figcaption></figure><ul><li>仅在 <strong>上锁且锁图更新</strong> 的时候检查是否成环</li></ul><figure><img src="'+d+'" alt="仅在上锁且锁图更新的时候检查是否成环" tabindex="0" loading="lazy"><figcaption>仅在上锁且锁图更新的时候检查是否成环</figcaption></figure></details></div><figure><img src="'+o+`" alt="山寨运行时死锁检查程序" tabindex="0" loading="lazy"><figcaption>我们山寨的运行时死锁检查程序的执行结果</figcaption></figure><h3 id="运行时的数据竞争检查" tabindex="-1"><a class="header-anchor" href="#运行时的数据竞争检查"><span>运行时的数据竞争检查</span></a></h3><p>对于数据竞争，我们也有一个明确的 <strong>Specification</strong> :</p><blockquote><p>数据竞争：<strong>不同的线程</strong>同时访问<strong>同一内存</strong>，且<strong>至少有一个是写</strong>。</p></blockquote><p>即使某些线程看起来能够与其余线程错开，但是数据竞争是仍然可能发生的 —— 这几个线程之间不存在 <em>happens before</em> 关系。</p><p>例如下面的例子：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="看起来存在 happens-before 的代码" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    spin_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sum</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;-- data race occurs</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    spin_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">A); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> N; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        y</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    spin_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    sum</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;-- data race occurs</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    spin_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">B); </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此我们采用如下方法来检查是否存在数据竞争：</p>`,11)),i("div",C,[i("p",null,[s[35]||(s[35]=a("对于发生在不同线程且至少有一个是写的 ")),i("mjx-container",H,[(t(),l("svg",M,s[31]||(s[31]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(1016.7,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g>',1)]))),s[32]||(s[32]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"x"),i("mo",null,","),i("mi",null,"y")])],-1))]),s[36]||(s[36]=a(" ，检查 ")),i("mjx-container",L,[(t(),l("svg",E,s[33]||(s[33]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(849.8,0)"><path data-c="227A" d="M84 249Q84 262 91 266T117 270Q120 270 126 270T137 269Q388 273 512 333T653 512Q657 539 676 539Q685 538 689 532T694 520V515Q689 469 672 431T626 366T569 320T500 286T435 265T373 249Q379 248 404 242T440 233T477 221T533 199Q681 124 694 -17Q694 -41 674 -41Q658 -41 653 -17Q646 41 613 84T533 154T418 197T284 220T137 229H114Q104 229 98 230T88 235T84 249Z"></path></g><g data-mml-node="mi" transform="translate(1905.6,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2617.8,0)"><path data-c="2228" d="M55 580Q56 587 61 592T75 598Q86 598 96 580L333 48L570 580Q579 596 586 597Q588 598 591 598Q609 598 611 580Q611 574 546 426T415 132T348 -15Q343 -22 333 -22T318 -15Q317 -14 252 131T121 425T55 580Z"></path></g><g data-mml-node="mi" transform="translate(3507,0)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4274.8,0)"><path data-c="227A" d="M84 249Q84 262 91 266T117 270Q120 270 126 270T137 269Q388 273 512 333T653 512Q657 539 676 539Q685 538 689 532T694 520V515Q689 469 672 431T626 366T569 320T500 286T435 265T373 249Q379 248 404 242T440 233T477 221T533 199Q681 124 694 -17Q694 -41 674 -41Q658 -41 653 -17Q646 41 613 84T533 154T418 197T284 220T137 229H114Q104 229 98 230T88 235T84 249Z"></path></g><g data-mml-node="mi" transform="translate(5330.6,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g>',1)]))),s[34]||(s[34]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",null,"x"),i("mo",null,"≺"),i("mi",null,"y"),i("mo",null,"∨"),i("mi",null,"y"),i("mo",null,"≺"),i("mi",null,"x")])],-1))])])]),s[46]||(s[46]=n(`<blockquote><p>大致意思：利用 <em>acquire</em> / <em>release</em> 所产生的 <em>happens before</em> 关系来形成具有传递关系的图，在这个图所表明的先后关系这一约束条件下，如果我们能找到没有约束的两个内存访问，且这两个访问发生在不同线程，并且至少有一个是写，那么程序中存在 <em>data race</em>。</p><p><s>(这个图生成的我不是很懂，故略过)</s></p></blockquote><h2 id="应对死线-——-防御性编程" tabindex="-1"><a class="header-anchor" href="#应对死线-——-防御性编程"><span>应对死线 —— 防御性编程</span></a></h2><p>你可能已经见识过下面这些 <em>Sanitizers</em> 的实力，<s>并且非常想把它搬到你的操作系统实验里面去</s>：</p><ul><li>Address Sanitizer (<code>asan</code>) <ul><li>Buffer (heap/stack/global) overflow, use-after-free, use-after-return, double-free, ...;</li><li>没有 <a href="https://www.kernel.org/doc/html/latest/dev-tools/kasan.html" target="_blank" rel="noopener noreferrer">KASAN</a>, Linux Kernel 的质量/安全性直接崩盘</li></ul></li><li>Thread Sanitizer (<code>tsan</code>): 数据竞争 <ul><li>KCSAN: <a href="https://lwn.net/Articles/816850/" target="_blank" rel="noopener noreferrer">Concurrency bugs should fear the big bad data-race detector</a></li></ul></li><li><a href="https://clang.llvm.org/docs/MemorySanitizer.html" target="_blank" rel="noopener noreferrer">Memory Sanitizer</a> (<code>msan</code>), <a href="https://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html" target="_blank" rel="noopener noreferrer">UBSanitizer</a> (<code>ubsan</code>), ...</li></ul><p>很不幸，移植不太容易成功。</p><p>那我们能不能做一个丐版的呢？🤔</p><ul><li>不实现完整的检查，但是可以帮我们检查出大部分的错误</li><li><code>assertions</code> 就是一个简单方便的选择！</li></ul><p>当然，在看完金丝雀的故事之后(这里就不放了，感兴趣的话自行前往 <a href="https://jyywiki.cn/OS/2024/lect13.md" target="_blank" rel="noopener noreferrer">Lec13</a> 查看)，也许你会认为 <strong>放置哨兵</strong> 这种思路也是不错的选择。</p><h3 id="防御性编程-1-低配版-lockdep" tabindex="-1"><a class="header-anchor" href="#防御性编程-1-低配版-lockdep"><span>防御性编程(1): 低配版 <em>Lockdep</em></span></a></h3><p>我们可以不断统计自旋的次数，如果次数达到了一个很高的上限值 <code>SPIN_LIMIT </code>，那么我们就抛出错误信息。</p><p>结合断点与 <code>backtrace</code>，也许能够帮你快速找到死锁的源头。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="在几秒之内检查死锁" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> spin_cnt </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">xchg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ❌</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ❌) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (spin_cnt</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> SPIN_LIMIT) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Spin limit exceeded @ </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%s</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            __FILE__, __LINE__);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(gdb) b </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(gdb) bt</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防御性编程-2-低配版-address-sanitizer" tabindex="-1"><a class="header-anchor" href="#防御性编程-2-低配版-address-sanitizer"><span>防御性编程(2): 低配版 <em>Address Sanitizer</em></span></a></h3><p>就拿 <a href="https://jyywiki.cn/OS/2024/labs/L1.md" target="_blank" rel="noopener noreferrer">L1</a> 来举例，如何检查诸如 <em>double free</em> 、 <em>double allocation</em> 等问题呢？</p><p>初始我们可以将未申请过的区域涂上某种颜色的漆，把已经申请过的区域统一 <strong>涂上另一种颜色的漆</strong> (下面统一用 <code>MAGIC</code> 表示)，释放掉的区域也同理 (假设涂上 <code>0</code> )。</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="低配版 Address Sanitizer" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// allocation</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(u32) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> size; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    panic_on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(((u32 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)ptr)[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAGIC, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;double-allocation&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> MAGIC;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// free</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; (i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(u32) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> alloc_size</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ptr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // can also detect use-after-free</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    panic_on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(((u32 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)ptr)[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;double-free&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    arr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[i] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="防御性编程-3-低配版-thread-sanitizer" tabindex="-1"><a class="header-anchor" href="#防御性编程-3-低配版-thread-sanitizer"><span>防御性编程(3)：低配版 Thread Sanitizer</span></a></h3><blockquote><p>数据竞争并不好进行观测 —— 它可能需要很久以后才 &quot;现形&quot;。同时，想要抓到具体的源头是不容易的。</p><p>因此，我们在这里仅仅试图去验证我们的程序中是否存在数据竞争。</p></blockquote><p>我们可以回顾一下数据竞争产生的原因：</p><ul><li><strong>不同的线程</strong>同时访问<strong>同一内存</strong>，且<strong>至少有一个是写</strong>。</li></ul><p><strong>写入势必会造成状态机状态的改变</strong> ，因此我们或许可以从观测状态改变入手。</p><p>我们可以在保证当前线程不对待观察内存进行修改的情况下 (假设当前处于上锁保护的状态)，对数据进行一对 <strong>&quot;时间跨度较大&quot;</strong> 的观察：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="在较大时间跨度之后观测状态" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Suppose x is lock-protected</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> observe1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> observe2 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">observe1 </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> observe2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不存在数据竞争，那么 <code>assertion</code> 一定会成立。</p><p>(这真的是一个天才的想法！甚至再往前走若干步，就能得到 <a href="https://www.usenix.org/legacy/events/osdi10/tech/full_papers/Erickson.pdf" target="_blank" rel="noopener noreferrer">Effective data race detection for the Kernel</a> ！)</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>Bugs (包括并发 bugs) 一直以来困扰着所有软件工程的实践者。我们不仅要应对 specification crisis (定义到底什么是对的)，甚至即便知道 specification，也难以应对现代软件的复杂性。为了部分应对这一点从而实现 “更正确” 的软件，我们把对程序的预期表达在程序中 (race-free, lock ordering, ...)，而不是让程序在自然状态下悄悄进入有问题的状态，就是我们目前解决程序调试问题的折中办法。“山寨” sanitizer 给我们带来的启发则是：如果我们能清楚地追溯到问题产生的本源，我们就总是能找到好的应对方法——山寨的 sanitizers 在暗中帮助你实现 fail-fast 的程序，从而减轻你调试问题的负担。希望这节课能启发、帮助你重新思考 “编程” 这件事。</p>`,27))])}const q=e(k,[["render",z],["__file","facing-concurrency-bugs.html.vue"]]),V=JSON.parse('{"path":"/zh/note/os/Concurrency/facing-concurrency-bugs.html","title":"应对并发 bugs","lang":"zh-CN","frontmatter":{"title":"应对并发 bugs","order":12,"icon":"bug-slash","categories":["操作系统"],"tags":["并发","常见bugs应对"],"description":"背景回顾：我们已经了解常见的并发 bug 类型：死锁、数据竞争、原子性/顺序违反。与此同时，在编程时消灭并发 bug 仍然是一个世界性的难题。那么，我们应该如何应对这些并发 bugs？ 本讲内容：另一节真正的实用 “编程” 课 —— 如何正确地 (并发) 编程：应对三种常见的 “死亡” 方式： 死锁 (deadlock) 死局 (软件危机中的 dead...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/note/os/Concurrency/facing-concurrency-bugs.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"应对并发 bugs"}],["meta",{"property":"og:description","content":"背景回顾：我们已经了解常见的并发 bug 类型：死锁、数据竞争、原子性/顺序违反。与此同时，在编程时消灭并发 bug 仍然是一个世界性的难题。那么，我们应该如何应对这些并发 bugs？ 本讲内容：另一节真正的实用 “编程” 课 —— 如何正确地 (并发) 编程：应对三种常见的 “死亡” 方式： 死锁 (deadlock) 死局 (软件危机中的 dead..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-25T07:48:49.000Z"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"常见bugs应对"}],["meta",{"property":"article:modified_time","content":"2024-11-25T07:48:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"应对并发 bugs\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-25T07:48:49.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"codePJCP2\\",\\"url\\":\\"https://docs.pjcp2-personal.cn/zh/\\"}]}"]]},"headers":[{"level":2,"title":"应对死锁","slug":"应对死锁","link":"#应对死锁","children":[]},{"level":2,"title":"应对死局 —— 绝处逢生","slug":"应对死局-——-绝处逢生","link":"#应对死局-——-绝处逢生","children":[{"level":3,"title":"运行时的死锁检查","slug":"运行时的死锁检查","link":"#运行时的死锁检查","children":[]},{"level":3,"title":"运行时的数据竞争检查","slug":"运行时的数据竞争检查","link":"#运行时的数据竞争检查","children":[]}]},{"level":2,"title":"应对死线 —— 防御性编程","slug":"应对死线-——-防御性编程","link":"#应对死线-——-防御性编程","children":[{"level":3,"title":"防御性编程(1): 低配版 Lockdep","slug":"防御性编程-1-低配版-lockdep","link":"#防御性编程-1-低配版-lockdep","children":[]},{"level":3,"title":"防御性编程(2): 低配版 Address Sanitizer","slug":"防御性编程-2-低配版-address-sanitizer","link":"#防御性编程-2-低配版-address-sanitizer","children":[]},{"level":3,"title":"防御性编程(3)：低配版 Thread Sanitizer","slug":"防御性编程-3-低配版-thread-sanitizer","link":"#防御性编程-3-低配版-thread-sanitizer","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1732520929000,"updatedTime":1732520929000,"contributors":[{"name":"codePJCP2","email":"159783914+codePJCP2@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":8.47,"words":2542},"filePathRelative":"zh/note/os/Concurrency/facing-concurrency-bugs.md","localizedDate":"2024年11月25日","autoDesc":true}');export{q as comp,V as data};
