import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as s,b as a,e,f as h,o as t}from"./app-QZoSmhnU.js";const p="/assets/assumed-atomic-change-9-361o76.jpeg",k="/assets/state-change-in-concurrency-program-iBOkriAu.jpeg",d="/assets/the-assumed-shared-memory--5FS22od.png",r="/assets/actual-memory-model-in-arm-arch-DAyI-Vm6.png",g="/assets/memory-model-in-x86-arch-86vIpxIU.png",c="/assets/thread-execute-sequence-DwouLony.jpeg",A="/assets/result-with-00-eljYviFf.png",o={};function y(B,i){return t(),l("div",null,[i[0]||(i[0]=s("blockquote",null,[s("p",null,[s("strong",null,"背景回顾"),a("：“操作系统玩具” 给出了理解操作系统的新视角：操作系统是状态机的管理者。因为在 "),s("code",null,"sys_sched()"),a(" 之后操作系统拥有随机选择状态机执行的权力，因此也带来了并发性。操作系统是世界上最早的并发程序。")])],-1)),i[1]||(i[1]=s("p",null,[s("strong",null,"本讲内容"),a("：多线程编程模型、线程库，以及并发带来的巨大麻烦。")],-1)),e(" more "),i[2]||(i[2]=h(`<h2 id="多处理器编程-入门" tabindex="-1"><a class="header-anchor" href="#多处理器编程-入门"><span>多处理器编程 - 入门</span></a></h2><h3 id="什么是多线程" tabindex="-1"><a class="header-anchor" href="#什么是多线程"><span>什么是多线程</span></a></h3><p>操作系统 -&gt; (管理) 多个进程</p><p>一个进程 -&gt; (拥有) 多个线程 <strong>(开始套娃了)</strong></p><p>这就是多线程。</p><h3 id="多线程编程模型-状态机模型" tabindex="-1"><a class="header-anchor" href="#多线程编程模型-状态机模型"><span>多线程编程模型 (状态机模型)</span></a></h3><p>多个共享内存的状态机</p><ul><li>C 语言状态机的多个线程 <ul><li>共享所有全局变量</li><li>独立的栈帧列表</li></ul></li><li>汇编语言状态机的多个线程 <ul><li>共享一个地址空间</li><li>独立的寄存器 (SP 指向不同内存位置)</li></ul></li></ul><p>状态迁移</p><ul><li>选择<strong>任意一个线程</strong>执行一步</li></ul><h3 id="多线程编程入门" tabindex="-1"><a class="header-anchor" href="#多线程编程入门"><span>多线程编程入门</span></a></h3><p>只需要 2 个 API 即可实现入门!</p><ul><li><code>spawn(fn)</code><ul><li>创建一个入口函数是 <code>fn</code> 的线程，并立即开始执行 <ul><li><code>void fn(int tid) { ... }</code></li><li>参数 <code>tid</code> 从 1 开始编号</li></ul></li><li>行为：<code>sys_spawn(fn, tid)</code></li><li>特殊说明: 该函数会把 <code>tid</code> 当作入参</li></ul></li><li><code>join()</code><ul><li>等待所有运行线程的返回 (也可以不调用)</li><li>行为：<code>while (done != T) sys_sched()</code></li></ul></li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="线程API使用示例" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;thread.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() { </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) { </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); } }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_a);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_b);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>操作系统会自动把线程放置在不同的处理器上，因此在运行这个入门程序之后，你可以看到 CPU 使用率超过 100% 的情况。</p><h3 id="课上留的思考" tabindex="-1"><a class="header-anchor" href="#课上留的思考"><span>课上留的思考</span></a></h3><ol><li><code>T_a</code> 和 <code>T_b</code> 真的共享内存吗？如何证明?</li><li>如何证明线程具有独立堆栈 (以及确定堆栈的范围)？</li></ol><h2 id="多处理器编程-放弃-操作的原子性" tabindex="-1"><a class="header-anchor" href="#多处理器编程-放弃-操作的原子性"><span>多处理器编程 - 放弃: 操作的原子性</span></a></h2><h3 id="原有误区" tabindex="-1"><a class="header-anchor" href="#原有误区"><span>原有误区</span></a></h3><p>在原先不涉及到并发编程的时候，我们总是隐式认为：</p><p><strong>“世界上仅有一个状态机”，没有任何东西能干涉程序的状态。</strong></p><p>因此，对于任何一个包含多步骤的函数调用，我们总是假想成原子性的迁移。</p><figure><img src="`+p+'" alt="我们假想的原子化迁移" tabindex="0" loading="lazy"><figcaption>我们假想的原子化迁移</figcaption></figure><p>但是在并发程序中，可能会出现下面的情况：</p><figure><img src="'+k+`" alt="在并发程序中的状态机模型" tabindex="0" loading="lazy"><figcaption>在并发程序中的状态机模型</figcaption></figure><p>“世界上只有一个状态机” 的假设在共享内存并发模型下被打破了。进而，每一次内存 <code>load</code> 都可能会读到其他线程覆盖写入的值——这给并发编程带来了很大的麻烦。</p><h3 id="并行-1-1" tabindex="-1"><a class="header-anchor" href="#并行-1-1"><span>并行 1 + 1</span></a></h3><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" data-title="Calculate 1 + 1 in concurrency program" style="--vp-collapsed-lines:20;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line highlighted"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;thread.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> N</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 100000000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> N; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // sum++;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // Won&#39;t work even if we force a single-instruction</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // increment.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        asm</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> volatile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">            &quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">incq %0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> : </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#50A14F;--shiki-dark:#ABB2BF;">+m</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sum)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        );</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_sum);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_sum);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;sum = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%ld</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, sum);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;2*n = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%ld</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;">L</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> N);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="The program&#39;s result" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sum = 103766919</span></span>
<span class="line"><span>2*n = 200000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="思考题-构造最小调度" tabindex="-1"><a class="header-anchor" href="#思考题-构造最小调度"><span>(思考题) 构造最小调度</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="What is the variable sum&#39;s minimal value in the end?" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T_sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> _ </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> range</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> heap.sum</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        sys_sched</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        heap.sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">        sys_sched</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    sys_write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">f</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;sum = </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">{</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">heap.sum</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">}</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">():</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    heap.sum </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    sys_spawn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_sum)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    sys_spawn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_sum)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">    sys_spawn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(T_sum)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多处理器编程-放弃-程序顺序执行的假设" tabindex="-1"><a class="header-anchor" href="#多处理器编程-放弃-程序顺序执行的假设"><span>多处理器编程 - 放弃: 程序顺序执行的假设</span></a></h2><p>很不幸，编译器也做了我们先前提到的隐含假设——如果编译器要考虑并行情况，那它还怎么做编译优化呢？</p><p><strong>在这个假设下，编译器会试图优化状态迁移，改变执行流。</strong></p><p>但是，<strong>共享内存</strong> 推翻了编译器的假设</p><ul><li>但编译器依然会按照顺序执行优化代码</li><li>否则几乎任何涉及共享内存的代码都变得 <strong>“不可优化”</strong></li></ul><p>程序的行为在并发编程下变得 <strong>更难理解</strong> 了</p><ul><li>“顺序程序” 变得一点也不 “顺序” 了</li></ul><h3 id="并行-1-1-1" tabindex="-1"><a class="header-anchor" href="#并行-1-1-1"><span>并行 1 + 1</span></a></h3><p>我们可以再次看向先前的 并行 1 + 1 例子，这次我们添加 <code>-O1</code> 标记进行优化：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="Calculate 1 + 1 using O1 optimize" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line highlighted"><span># 结果几乎是恒定的</span></span>
<span class="line"><span>sum = 100000000</span></span>
<span class="line"><span>2*n = 200000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="The assemble code with O1" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line highlighted"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    11e7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:       </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">48</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 8b </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">15</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 52</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2e </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">00</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 00</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0x2e52</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rdx</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        # 4040 &lt;sum&gt;</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    11ee:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">       48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 8d</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 42</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 01</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">             lea</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">    0x1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    11f2:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">       48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 81</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c2 </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">01</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> e1 f5 </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">05</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    add</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    $0x5f5e101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rdx</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    11f9:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">       48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 89</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c1                </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    %</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rcx</span></span>
<span class="line"><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">    11fc:</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">       48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 83</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> c0 </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">01</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">             add</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    $0x1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">    1200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:       </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 39</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> d0                </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">cmp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    %</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rdx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rax</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">    1203</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:       </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">75</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f4                   </span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">jne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    11f9 &lt;T_sum+</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">    1205</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:       </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">48</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 89</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 0d</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 34</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 2e </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">00</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;"> 00</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">    mov</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    %</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rcx</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x2e34</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(%</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rip</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)       </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> # 4040 &lt;sum&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>-O1</code> 优化等级下，该程序的大致执行流程为：</p><p><code>load(sum)</code> -&gt; <code>while(i &lt;= n) sum++;</code> -&gt; <code>store(sum)</code></p><p>每个线程都在并行执行相同的步骤，因此(在如果线程没有受到外部干扰的情况下)，产生的 <code>sum</code> 结果恒定为 <code>n</code>。</p><p>然后我们再以 <code>-O2</code> 标记进行优化：</p><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="Calculate 1 + 1 using O2 optimize" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line highlighted"><span># 结果基本上是完全恒定的</span></span>
<span class="line"><span>sum = 200000000</span></span>
<span class="line"><span>2*n = 200000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-plain line-numbers-mode" data-highlighter="shiki" data-ext="plain" data-title="The assemble code with O2" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>0000000000001260 &lt;T_sum&gt;:</span></span>
<span class="line highlighted"><span>    1260:       f3 0f 1e fa             endbr64 </span></span>
<span class="line"><span>    1264:       48 81 05 d1 2d 00 00    addq   $0x5f5e100,0x2dd1(%rip)        # 4040 &lt;sum&gt;</span></span>
<span class="line"><span>    126b:       00 e1 f5 05 </span></span>
<span class="line"><span>    126f:       c3                      ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>-O2</code> 优化等级下，循环被直接优化成了立即数加法(<code>addq</code>)，这大大减小了 <code>race condition</code> 发生的可能性(但是可能性还是存在的，可以通过构造合法调度复现)。</p><h3 id="实现一个简单的join" tabindex="-1"><a class="header-anchor" href="#实现一个简单的join"><span>实现一个简单的<code>join()</code>?</span></a></h3><p>如果你想要尝试着实现一个简单的 <code>join()</code> 来等待线程完成，假设你可以使用一个全局变量 <code>flag</code> 来实现进程之间的标志通信，那么一个简单的 <code>join()</code> 里面的核心代码也许会长这样：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="A simple implementation of join()" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">flag) ;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的想法很简单：</p><p>等到 <code>flag</code> 被举起之后再进行之后的操作，否则就一直执行死循环。</p><p>然而这是并发角度下的设想，如果将这段代码移到<strong>顺序执行</strong>的角度下呢？</p><p>如果 <code>flag == true</code> ，那么直接跳走，否则执行死循环。</p><p>在编译器基于顺序程序执行的假设的优化下，很有可能上面这段代码就被优化成循序执行角度所描述的代码行为了，在并发程序中运行很可能会带来不可预知的问题。</p><p>通常意义上来说，可以使用 <code>volatile</code> 关键字来<strong>防止</strong>编译器对被该关键字声明的变量的读写进行优化。</p><h2 id="多处理器编程-放弃-存在全局指令执行顺序的假设" tabindex="-1"><a class="header-anchor" href="#多处理器编程-放弃-存在全局指令执行顺序的假设"><span>多处理器编程 - 放弃: 存在全局指令执行顺序的假设</span></a></h2><h3 id="原有误区-1" tabindex="-1"><a class="header-anchor" href="#原有误区-1"><span>原有误区</span></a></h3><p>回顾已经经过两次优化反思后的状态机模型，它的内部还是隐藏着一些误区，比如我们总是隐式认为：</p><p>状态机模型的状态迁移为：</p><ul><li>选择一个线程，执行一条指令</li><li>这表明状态机模型中指令执行的**“顺序一致性”**</li></ul><p>幸运的是，单处理器上的多线程处理是符合我们预先的假设的：</p><ul><li>处理器会保证指令集合<strong>表层上</strong>的顺序完成性</li></ul><p>但是，处理器<strong>也是编译器</strong>：</p><ul><li>处理器会预取即将顺序执行的若干步迁移，并且尝试着做处理优化(类似于编译器的处理优化)</li></ul><p>例如有如下指令序列：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">store</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">y</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果说 <code>x != y</code>(可以看成 Java 意义上的 <code>!=</code>) ，就意味着这两条指令使用的资源是无关的，因此可以不用去关心任何一条指令的执行情况——即使某一条指令暂时中断了(例如 Load Cache Miss)，另外一条指令可以直接执行，不需要等待先前执行的指令完成。</p><h3 id="共享内存" tabindex="-1"><a class="header-anchor" href="#共享内存"><span>共享内存？</span></a></h3><p>我们在介绍线程的概念中提到，“同一进程的线程之间是共享内存的”。并且我们在 1.4 节也给出了证明方法。</p><p>不幸的是，“共享内存”或许只是一个假象。造成这一切的根本原因是各个处理器内部维护的状态与共享内存可能并不相同——各个处理器都维护着自己的内存(缓存)副本，而各处理器之间的这些副本的数据状态可能在全局意义上<strong>并不一致</strong>。</p><figure><img src="`+d+'" alt="你以为的共享内存" tabindex="0" loading="lazy"><figcaption>你以为的共享内存</figcaption></figure><figure><img src="'+r+'" alt="ARM(或其他非x86架构) 的内存修罗场" tabindex="0" loading="lazy"><figcaption>ARM(或其他非x86架构) 的内存修罗场</figcaption></figure><figure><img src="'+g+`" alt="x86内存模型(添加了写缓冲区)" tabindex="0" loading="lazy"><figcaption>x86内存模型(添加了写缓冲区)</figcaption></figure><p>如果采用 ARM 架构的处理器，运行下面的一段代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="load/store" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, y </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> y;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // Store(x); Load(y)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  __sync_synchronize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, t);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> T2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  y </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> t </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // Store(y); Load(x)</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  __sync_synchronize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  printf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, t);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的代码，我们大致可以画出下面的执行顺序：</p><figure><img src="`+c+'" alt="我们认为的执行顺序" tabindex="0" loading="lazy"><figcaption>我们认为的执行顺序</figcaption></figure><p>但是，由于处理器也是编译器——它会预取待执行队列中最前面的若干条指令，判断是否相关，如果不相关则可以任意顺序执行该部分指令。</p><blockquote><p>这就是在<strong>处理器方面</strong>我们一般看不见的优化。在顺序程序中，这一优化并不改变程序的行为，因此它是有效的。但在并发程序中就不一定了——我们无法预知并发行为的时序。</p></blockquote><p>假如我们以<strong>处理器只会顺序执行指令</strong>的视角来审视这段代码，我们应该完全不可能构造出结果为 <code>00</code> 的合法调度！</p><p>然而，实际运行结果是这样的...</p><figure><img src="'+A+`" alt="执行上述代码时的单次测试结果" tabindex="0" loading="lazy"><figcaption>对...对吗?</figcaption></figure><p>我们再看看另一段代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Thread 1 </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">done </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Thread 2</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(done </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* loop */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的执行结果不仅取决于硬件，还取决于编译器。</p><ul><li>在 x86 多处理器上运行的<strong>逐行转换为汇编代码的程序</strong>将始终打印 1。但是，在 ARM 或 POWER 架构的多处理器上运行的直接行对行转换为汇编的代码存在打印 0 的情况。</li><li>此外，无论底层硬件是什么，标准编译器优化都可以使该程序打印为 0 或进入无限循环。(编译器将 <code>while(done == 0) {}</code> 这个循环体优化成了一个 <code>if</code> —— 略过该循环块 or 执行死循环)</li></ul><p>根据上面几段并发程序的执行结果，我们可以发现：即便我们能控制编译器生成的指令，并发程序的行为还是很容易变得更难理解(并发程序执行的结果，甚至可以不是所有执行过指令的某个排列顺序运行的结果！)，这一切都是(现代)处理器内部隐藏的一个动态编译器与缓存共同作用的结果。</p>`,90))])}const m=n(o,[["render",y],["__file","intro-multi-processor-programming.html.vue"]]),v=JSON.parse('{"path":"/zh/note/os/Concurrency/intro-multi-processor-programming.html","title":"多处理器编程： 从入门到放弃","lang":"zh-CN","frontmatter":{"title":"多处理器编程： 从入门到放弃","order":5,"icon":"scroll","categories":["操作系统"],"tags":["多处理器编程"],"description":"背景回顾：“操作系统玩具” 给出了理解操作系统的新视角：操作系统是状态机的管理者。因为在 sys_sched() 之后操作系统拥有随机选择状态机执行的权力，因此也带来了并发性。操作系统是世界上最早的并发程序。 本讲内容：多线程编程模型、线程库，以及并发带来的巨大麻烦。 多处理器编程 - 入门 什么是多线程 操作系统 -> (管理) 多个进程 一个进程 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/note/os/Concurrency/intro-multi-processor-programming.html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"多处理器编程： 从入门到放弃"}],["meta",{"property":"og:description","content":"背景回顾：“操作系统玩具” 给出了理解操作系统的新视角：操作系统是状态机的管理者。因为在 sys_sched() 之后操作系统拥有随机选择状态机执行的权力，因此也带来了并发性。操作系统是世界上最早的并发程序。 本讲内容：多线程编程模型、线程库，以及并发带来的巨大麻烦。 多处理器编程 - 入门 什么是多线程 操作系统 -> (管理) 多个进程 一个进程 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T08:20:26.000Z"}],["meta",{"property":"article:tag","content":"多处理器编程"}],["meta",{"property":"article:modified_time","content":"2024-11-22T08:20:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"多处理器编程： 从入门到放弃\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T08:20:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"codePJCP2\\",\\"url\\":\\"https://docs.pjcp2-personal.cn/zh/\\"}]}"]]},"headers":[{"level":2,"title":"多处理器编程 - 入门","slug":"多处理器编程-入门","link":"#多处理器编程-入门","children":[{"level":3,"title":"什么是多线程","slug":"什么是多线程","link":"#什么是多线程","children":[]},{"level":3,"title":"多线程编程模型 (状态机模型)","slug":"多线程编程模型-状态机模型","link":"#多线程编程模型-状态机模型","children":[]},{"level":3,"title":"多线程编程入门","slug":"多线程编程入门","link":"#多线程编程入门","children":[]},{"level":3,"title":"课上留的思考","slug":"课上留的思考","link":"#课上留的思考","children":[]}]},{"level":2,"title":"多处理器编程 - 放弃: 操作的原子性","slug":"多处理器编程-放弃-操作的原子性","link":"#多处理器编程-放弃-操作的原子性","children":[{"level":3,"title":"原有误区","slug":"原有误区","link":"#原有误区","children":[]},{"level":3,"title":"并行 1 + 1","slug":"并行-1-1","link":"#并行-1-1","children":[]},{"level":3,"title":"(思考题) 构造最小调度","slug":"思考题-构造最小调度","link":"#思考题-构造最小调度","children":[]}]},{"level":2,"title":"多处理器编程 - 放弃: 程序顺序执行的假设","slug":"多处理器编程-放弃-程序顺序执行的假设","link":"#多处理器编程-放弃-程序顺序执行的假设","children":[{"level":3,"title":"并行 1 + 1","slug":"并行-1-1-1","link":"#并行-1-1-1","children":[]},{"level":3,"title":"实现一个简单的join()?","slug":"实现一个简单的join","link":"#实现一个简单的join","children":[]}]},{"level":2,"title":"多处理器编程 - 放弃: 存在全局指令执行顺序的假设","slug":"多处理器编程-放弃-存在全局指令执行顺序的假设","link":"#多处理器编程-放弃-存在全局指令执行顺序的假设","children":[{"level":3,"title":"原有误区","slug":"原有误区-1","link":"#原有误区-1","children":[]},{"level":3,"title":"共享内存？","slug":"共享内存","link":"#共享内存","children":[]}]}],"git":{"createdTime":1730811060000,"updatedTime":1732263626000,"contributors":[{"name":"codePJCP2","email":"159783914+codePJCP2@users.noreply.github.com","commits":3}]},"readingTime":{"minutes":9.35,"words":2805},"filePathRelative":"zh/note/os/Concurrency/intro-multi-processor-programming.md","localizedDate":"2024年11月5日","autoDesc":true}');export{m as comp,v as data};
