import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as s,b as a,e as h,f as n,o as t}from"./app-CySHXAx9.js";const p="/assets/image-20241105094802053-NTDIxN5-.png",k="/assets/image-20241105102252272-Dfdzz9la.png",r="/assets/image-20241105201544727-BReUqwoD.png",d="/assets/image-20241105202615718-Dd1gAmft.png",o={},c={class:"hint-container warning"},g={class:"MathJax",jax:"SVG",style:{position:"relative"}},A={style:{"vertical-align":"-0.127ex"},xmlns:"http://www.w3.org/2000/svg",width:"5.278ex",height:"1.824ex",role:"img",focusable:"false",viewBox:"0 -750 2333 806","aria-hidden":"true"};function y(B,i){return t(),l("div",null,[i[10]||(i[10]=s("blockquote",null,[s("p",null,[a("背景回顾：我们希望通过互斥实现 "),s("em",null,"“stop the world”"),a(" 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 "),s("strong",null,"硬件原子指令"),a(" 基础上实现了基础版本的自旋锁。")])],-1)),i[11]||(i[11]=s("p",null,[a("本节内容：如何分别在 "),s("strong",null,"操作系统内核"),a(" 和 "),s("strong",null,"用户态应用程序"),a(" 中实现互斥。")],-1)),h(" more -"),i[12]||(i[12]=n(`<h2 id="理解并发编程" tabindex="-1"><a class="header-anchor" href="#理解并发编程"><span>理解并发编程</span></a></h2><h3 id="并发编程中的一些可行抽象" tabindex="-1"><a class="header-anchor" href="#并发编程中的一些可行抽象"><span>并发编程中的一些可行抽象</span></a></h3><ul><li><p>线程 = 人</p></li><li><p>共享内存 = 物理世界</p></li><li><p>Everything is 状态机</p></li></ul><h3 id="互斥需要实现的内容" tabindex="-1"><a class="header-anchor" href="#互斥需要实现的内容"><span>互斥需要实现的内容</span></a></h3><ul><li><p><strong>Safety</strong></p><ul><li><p>如果某个线程持有锁，则其他线程的 <code>lock</code> 不能返回 (保证该锁的持久唯一性)</p></li><li><p>能 <strong>正确处理处理器乱序、宽松内存模型和编译优化</strong></p></li><li><p>保证持有锁过程中的修改能够令其余线程 <strong>可见</strong></p></li></ul></li><li><p><strong>Liveness</strong></p><ul><li>在多个线程执行 <code>lock</code> 时，至少有一个可以返回 （否则就会产生死锁现象）</li></ul></li></ul><h3 id="对锁的正确理解" tabindex="-1"><a class="header-anchor" href="#对锁的正确理解"><span>对锁的正确理解</span></a></h3><p><code>lock/unlock</code> 并没有 <em>“stop the world”</em> ：</p><ul><li><p>上锁仅仅只是保护了 <strong>同一把锁</strong> 保护的代码</p><ul><li>思考一下存在 <strong>多把锁</strong> 的情况</li></ul></li><li><p>即使你正确实现了 <code>lock/unlock</code> ，如果锁没有被正确使用，也无法达到预期的 <em>&quot;stop the world&quot;</em> 效果</p><ul><li>线程 <code>T1</code> <code>T2</code> 在访问某一段 Critical Section 前均持有锁，但是另一个线程 <code>T3</code> 在访问同一段代码时并 <strong>没有先尝试获取锁</strong>...</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="data race" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lock_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lock;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// T1 &amp; T2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spin_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spin_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// But for T3...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Enters Critical Section without acquiring lock first</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="操作系统内核中的互斥" tabindex="-1"><a class="header-anchor" href="#操作系统内核中的互斥"><span>操作系统内核中的互斥</span></a></h2><h3 id="回顾-计算机系统的状态机模型" tabindex="-1"><a class="header-anchor" href="#回顾-计算机系统的状态机模型"><span>回顾：计算机系统的状态机模型</span></a></h3><ul><li>初始状态 <ul><li><em>CPU Reset</em></li></ul></li><li>当前状态 <ul><li>共享内存 + 各个 CPU 内维护的寄存器状态</li></ul></li><li>状态迁移 <ul><li>选择任意 CPU <ul><li>取指执行 <strong>or 响应中断</strong></li></ul></li></ul></li></ul><div class="hint-container note"><p class="hint-container-title">🤔 如果在执行 Critical Section 的时候，CPU 响应中断了的话，会发生什么情况？</p><ul><li>也许会出现 <strong>还没有 <code>unlock</code> 的时候就被强制执行中断</strong> 的情况</li><li>如果 <strong>中断后有其余进程想要获取访问该 Critical Section 时需要持有的锁</strong> 呢？ <ul><li>死锁的产生 😱</li></ul></li></ul></div><h3 id="正确实现互斥" tabindex="-1"><a class="header-anchor" href="#正确实现互斥"><span>正确实现互斥</span></a></h3><p>我们都知道，中断是每个处理器中 <strong>单独</strong> 的事件。而当中断与多处理器同时存在的时候，就像上节最后的情况一样，要正确实现互斥会变得非常棘手：不仅需要考虑处理器间的互斥，还要考虑各个处理器分别发生的中断。</p><h4 id="编程之前-正确性准则的设定" tabindex="-1"><a class="header-anchor" href="#编程之前-正确性准则的设定"><span>编程之前：正确性准则的设定</span></a></h4><p>当我们接到一个编程任务的时候，我们经常做的第一件事就是 —— IDE，启动！</p><p>然后就开始了库库写代码的过程，写完代码之后 Submit 一下或者 Run 一下，看看对不对，如果不对转头修改或重写。</p><p>这种情况下，我们并没有预先考虑过 <em>&quot;这份代码究竟怎样才算对&quot;</em> ，所以我们总是会在 修改/重写 &lt;-&gt; 验证 这几个步骤之间来回横跳。</p><p>为了减少 <em>&quot;绕圈几率&quot;</em> ， 我们可以在写代码之前预先设定一系列正确性准则来辅助我们验证程序的正确性，这种方式叫做 <strong>&quot;Test-first programming&quot;</strong> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><div class="hint-container info"><p class="hint-container-title">互斥实现的正确性分析</p><p>要设定实现互斥的正确性准则，不妨先从互斥的实现思路开始分析：</p><ul><li><p>既然中断会让互斥的实现变得棘手，那么在需要互斥的时候 <strong>关中断</strong> 不就可以了吗？</p></li><li><p>之后，为了确保互斥真正不被中断打扰，那么每次在上锁之前关闭中断，在解锁后立即开启中断，这样不就解决问题了吗？</p></li></ul></div><p>对于一般情况而言，这种思路是可行的，因为一般情况下进入 Critical Section 的时候，原有的中断状态是开启的，在解锁时候立即开启中断并不会修改进入前后的中断开启状态。</p><p>但是对于 <strong>中断处理程序</strong> 等特殊程序而言，为了防止处理中断的过程中再次发生中断，而导致的中断处理程序的重入或执行混乱，中断处理程序通常会在程序执行入口点关闭中断，直到中断处理程序执行完成之后再重启中断。这种机制确保了中断处理的原子性和系统的稳定性。</p><p>这种情况下，上述的互斥实现思路就出现了问题 —— 中断处理程序在进入某一段 Critical Section 之后 (此时中断处理程序 <strong>非常有可能尚未执行完成</strong>) ，它的中断被 <strong>打开</strong> 了。这显然不是我们期望的结果 —— 我们希望执行完 Critical Section 之后，中断处理程序的中断仍然是关闭的。</p><p>由此，第一条正确性准则就这么被分析出来了 —— <strong>上锁/解锁前后中断状态不变</strong>。</p><p>这条正确性原则的内容包括：</p><ul><li>不得在关中断时随意打开中断 (例如处理中断时)</li><li>不得随意关闭中断 (否则可能导致 <strong>中断丢失</strong> )</li></ul><p>实际编程的过程中，我们也很有可能遇到 Critical Section 套 Critical Section 的情况，例如需要对一个数据结构上的某几个端点进行上锁，之后进行原子修改的情况。</p><p>比如说，你需要 lock 一个 (子) 树的根结点与左右结点。这种情况下你想要让对 <strong>两个结点</strong> （子左 &amp; 子右）的修改都被锁保护住，因此你可能会写出与下面的代码类似的代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="Nesting of locks" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lock_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a, b, c;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The following code can&#39;t be interrupted</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// otherwise it may result in deadlocks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section For b...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section For c...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果真的沿用上面分析的实现思路来实现并发，那么在与上面的代码类似的 <strong>&quot;锁嵌套&quot;</strong> 情形中，有极大可能会出现死锁的情况。</p><p>为了解决这种问题，我们希望在整个 <strong>&quot;锁嵌套&quot;</strong> 情形中，整个处理器的中断状态 (即对应的 <em>IF Bit</em>) 不进行改变，达到原子迁移的效果。</p><p>要在一系列 Critical Section 执行完毕 (这里特指 <strong>&quot;所有锁释放完成&quot;</strong>) 后，恢复处理器的中断状态。</p><div class="hint-container tip"><p class="hint-container-title">思考</p><p>想要恢复中断状态，势必需要将一个待恢复的状态存于某处。</p><p>那么它应该存储在哪里呢？ 🤔</p><ul><li>一个全局变量 ? !! 它也需要锁来保证操作的原子性；同时，现代计算机结构普遍包含多处理器!!</li><li>各 CPU 内部 ? !! 状态可以被处理器中的所有线程共享，而且中断状态本身就是对每个 CPU 而言的!!</li><li>各线程内部 ? !! 中断状态对其余线程是不可见的；假设 CPU 要调整中断状态，各线程内部也需要同步存储原始状态!!</li></ul></div><h4 id="中断的保存与恢复" tabindex="-1"><a class="header-anchor" href="#中断的保存与恢复"><span>中断的保存与恢复</span></a></h4><p>由于 <code>lock</code> 和 <code>unlock</code> 通常都是成对出现的，就跟 <code>()</code> <code>[]</code> 等成对的符号一样。我们可以借助这一特性来完成对中断的恢复操作。</p><p>我们可以把 <code>lock</code> 与 <code>unlock</code> 的操作抽象为对一个 <strong>&quot;锁堆栈&quot;</strong> 的操作：</p><ul><li>每当 <code>lock</code> 的时候，将 <strong>(抽象的)</strong> 锁状态 <code>push</code> 进锁堆栈</li><li>当出现 <code>unlock</code> 操作的时候，将栈顶的锁 <code>pop</code> 出锁堆栈</li><li>如果栈为空，说明当前所有的锁均已被释放，此时便可将中断状态 <code>IF Bit</code> 恢复为原先的状态。</li></ul><p>下面这段代码模拟了对 <strong>&quot;锁堆栈&quot;</strong> 的 <code>push</code> 与 <code>pop</code> 操作：</p><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" data-title="从 xv-6 偷来的自旋锁实现" style="--vp-collapsed-lines:20;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Other codes are hidden.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// push_off/pop_off are like intr_off()/intr_on()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// except that they are matched:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// it takes two pop_off()s to undo two push_off()s.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Also, if interrupts are initially off, then</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// push_off, pop_off leaves them off.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> push_off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ienabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cpu </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mycpu;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    iset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">intena</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pop_off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cpu </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mycpu;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Never enable interrupt when holding a lock.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ienabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pop_off - interruptible&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pop_off&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">intena</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        iset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="操作系统内核中的-半-无锁互斥" tabindex="-1"><a class="header-anchor" href="#操作系统内核中的-半-无锁互斥"><span>操作系统内核中的 (半) 无锁互斥</span></a></h2><p>在上一节中，我们已经能够使用自旋来正确地实现互斥了。然而它的缺点也是显而易见的：</p><ul><li><p>过长的中断关闭可能导致大量中断丢失</p></li><li><p><em>More CPUs / Threads , worse performance</em>. (随着线程数的增加，资源实际利用率反而降低了)</p></li></ul><figure><img src="`+p+`" alt="More CPUs / Threads, worse performance." tabindex="0" loading="lazy"><figcaption>More CPUs / Threads, worse performance.</figcaption></figure><p>我们可以使用上面正确实现的自旋锁来模拟不同线程数时的情况：</p><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" data-title="spin-lock-test.c" style="--vp-collapsed-lines:20;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;thread.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;thread-sync.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> N</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10000000</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">spinlock_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lock </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SPIN_INIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n, sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 自旋锁</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Tsum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        spin_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lock);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sum</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        spin_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lock);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> argc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">argv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">[]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(argc </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nthread </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> atoi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">argv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 把一个求和任务分给 nthread 个线程做</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> N </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nthread;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nthread; i</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        create</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Tsum);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    assert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sum </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> n </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> nthread);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><figure><img src="`+k+'" alt="不同线程数下的 sum++ 测试" tabindex="0" loading="lazy"><figcaption>不同线程数下的 sum++ 测试</figcaption></figure><p>可以很明显地看到，程序性能随着并发线程数的增多而 <strong>急剧</strong> 下降。</p><h3 id="总结-自旋锁的使用场景" tabindex="-1"><a class="header-anchor" href="#总结-自旋锁的使用场景"><span>总结：自旋锁的使用场景</span></a></h3><p>长时间持有自旋锁，以及多处理器争抢自旋锁等情况下，自旋锁带来的性能损耗是 <strong>显而易见</strong> 的。</p><p>为了减少性能损耗，以及减少丢失的中断事件数，自旋锁一般只用于 <strong>操作系统内核中的短临界区(例如并发数据结构等)</strong> 。</p><h3 id="读写不对称现象" tabindex="-1"><a class="header-anchor" href="#读写不对称现象"><span>读写不对称现象</span></a></h3><p>在操作系统内核中，存在着许多具有读写不对称现象的数据结构：</p><ul><li>路由表 <ul><li>每发送一次包都需要查找路由表，然后送到下一跳</li><li>改变路由表中内容的频率相比读取内容的频率要 <strong>低得多</strong></li></ul></li><li>用户/文件权限管理 <ul><li>每次操作之前都会检查有没有权限</li><li>修改权限的频率跟读取权限的频率相比也是非常的不对称</li></ul></li><li>...</li></ul><h3 id="rcu-read-copy-update" tabindex="-1"><a class="header-anchor" href="#rcu-read-copy-update"><span>RCU (Read-copy-update) 🌶️</span></a></h3><p>Read-copy-update 这类锁能够显著提升并发程序中操作读写不对称的数据结构的效率。这类锁的基本策略是：对 <strong>读取不设置锁</strong> (这就导致了读入数据时可能看到 <strong>不同版本</strong> 的问题)，对写入实行 Copy-on-write <sup class="footnote-ref"><a href="#footnote2">[2]</a><a class="footnote-anchor" id="footnote-ref2"></a></sup> 策略。该类锁虽然牺牲了部分 <strong>读写一致性</strong>，但是使得操作读写不对称的数据结构的效率有了大幅提高，因此后续被广泛应用于操作系统内核中。</p><div class="hint-container note"><p class="hint-container-title">思考</p><p>在写入时实行 Copy-on-write 策略，如果不外加任何处理的话，旧版本数据仍旧会存在于内存中，也有可能会被某些线程读取并访问。</p><p>那么应该在何时进行旧版本数据的回收呢?</p></div><p>这里不进行过多展开，详见 <a href="https://en.wikipedia.org/wiki/Read-copy-update" target="_blank" rel="noopener noreferrer">Read-copy-update</a> 。</p><h2 id="用户态应用程序中的互斥" tabindex="-1"><a class="header-anchor" href="#用户态应用程序中的互斥"><span>用户态应用程序中的互斥</span></a></h2><p>运行在内核中的程序与一般的用户态应用程序在权限上的 <strong>最大不同</strong> 是：用户态应用程序 <strong>无法关闭中断</strong> ！</p>',59)),s("div",c,[i[8]||(i[8]=s("p",{class:"hint-container-title"},"无法关闭中断导致的后果",-1)),i[9]||(i[9]=s("p",null,"前面我们已经解释过不关闭中断可能产生的情况：",-1)),s("ul",null,[s("li",null,[i[5]||(i[5]=a("持有自旋锁的线程在还没有 ")),i[6]||(i[6]=s("code",null,"unlock",-1)),i[7]||(i[7]=a(" 的情况下因中断而切换的话... ")),s("ul",null,[s("li",null,[i[2]||(i[2]=a("线程空转率达到了惊人的 ")),s("mjx-container",g,[(t(),l("svg",A,i[0]||(i[0]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(1000,0)"></path></g><g data-mml-node="mi" transform="translate(1500,0)"><path data-c="25" d="M465 605Q428 605 394 614T340 632T319 641Q332 608 332 548Q332 458 293 403T202 347Q145 347 101 402T56 548Q56 637 101 693T202 750Q241 750 272 719Q359 642 464 642Q580 642 650 732Q662 748 668 749Q670 750 673 750Q682 750 688 743T693 726Q178 -47 170 -52Q166 -56 160 -56Q147 -56 142 -45Q137 -36 142 -27Q143 -24 363 304Q469 462 525 546T581 630Q528 605 465 605ZM207 385Q235 385 263 427T292 548Q292 617 267 664T200 712Q193 712 186 709T167 698T147 668T134 615Q132 595 132 548V527Q132 436 165 403Q183 385 203 385H207ZM500 146Q500 234 544 290T647 347Q699 347 737 292T776 146T737 0T646 -56Q590 -56 545 0T500 146ZM651 -18Q679 -18 707 24T736 146Q736 215 711 262T644 309Q637 309 630 306T611 295T591 265T578 212Q577 200 577 146V124Q577 -18 647 -18H651Z"></path></g></g></g>',1)]))),i[1]||(i[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"100"),s("mi",{mathvariant:"normal"},"%")])],-1))]),i[3]||(i[3]=a(" ！！"))]),i[4]||(i[4]=s("li",null,[a("如果应用程序也能够实现一小段时间的 "),s("code",null,"Stop the world"),a(" 就好了...")],-1))])])])]),i[13]||(i[13]=n('<p>同时，先前我们正确实现的自旋锁存在着 <strong>严重的性能问题</strong> ：<em>More CPUs / Threads, worse performance</em>. 具体体现在：</p><ul><li>除了进入临界区的线程，其他处理器上的线程都在 <strong>空转</strong><ul><li>争抢锁的处理器越多，利用率越低</li><li>如果临界区较长，不如把处理器 <strong>让给其他线程</strong></li></ul></li></ul><p>自旋对程序的性能有着巨大的影响，因此我们试图寻找一种更高效的互斥实现。</p><h3 id="在用户态应用程序上实现互斥" tabindex="-1"><a class="header-anchor" href="#在用户态应用程序上实现互斥"><span>在用户态应用程序上实现互斥</span></a></h3><p>分析完自旋锁存在的缺陷之后，我们希望优化这些缺陷 —— 能否让等待锁的线程不再自旋，而是再等待的过程中 <strong>去干点别的</strong> 呢？</p><p>用户态应用程序中并不存在关闭中断的能力，它能做的只有两件事： <strong>执行指令</strong> 与 <strong>系统调用</strong>。</p><p>应用程序可以通过系统调用来将状态机托管给操作系统，直至系统调用结束。并且在系统调用过程中，<strong>可以执行内核相关的操作</strong> —— 关中断等。</p><p>那我们把锁的实现放到 <strong>操作系统层面</strong> 就好啦：</p><ul><li><code>syscall(SYSCALL_lock, &amp;lk);</code><ul><li>试图获得 <code>lk</code>，但如果失败，就 <strong>切换到其他线程</strong> (不再干等)</li></ul></li><li><code>syscall(SYSCALL_unlock, &amp;lk);</code><ul><li>释放 <code>lk</code>，如果有等待锁的线程就唤醒 (移除对应线程的 &quot;等待&quot; 标记)</li></ul></li></ul><figure><img src="'+r+'" alt="预想锁实现的基本图示 - 1" tabindex="0" loading="lazy"><figcaption>预想锁实现的基本图示 - 1</figcaption></figure><figure><img src="'+d+'" alt="预想锁实现的基本图示 - 2" tabindex="0" loading="lazy"><figcaption>尽可能避免了空转产生</figcaption></figure><p>经过这一系列操作，我们把一个(可能很长)的临界区转换为了 <strong>较短</strong> 的临界区 —— 用一个很短的临界区来判断线程是否成功获取锁，在线程获取锁失败后，线程不再空转，而是跑去干别的了(或者进入睡眠了) ，此时临界区就暂时结束了 (因为获取锁失败后不用在进入临界区之前干等了)。具体内容详见 <a href="https://www.bilibili.com/video/BV1d2421A7uh" target="_blank" rel="noopener noreferrer">Lecture 07 - mutex(2)</a> 视频中的 1:20:00 - 1:24:26 处。</p><h3 id="一个非常具有-scalability-的实现-pthread-h" tabindex="-1"><a class="header-anchor" href="#一个非常具有-scalability-的实现-pthread-h"><span>一个非常具有 Scalability 的实现 - <code>&lt;pthread.h&gt;</code></span></a></h3><p><code>pthread.h</code> 是 POSIX 线程（POSIX Threads，通常简称为 <code>pthread</code>）库的头文件，用于在 Unix/Linux 系统上进行多线程编程。该库为创建、控制和同步线程提供了接口，是 C 语言编写多线程程序的基础。</p><p>它是一个 <strong>足够高性能的实现</strong> ：</p><ul><li>具有相当不错的 scalability</li><li>更多线程争抢时也没有极为显著的性能下降</li></ul><p>为什么平均性能相比自旋锁来说足够高？</p><ul><li><p>Fast Path: 自旋一次</p><ul><li>无线程持有锁的时候 - 甚至不调用 <code>syscall</code> ，直接在用户态获取锁</li></ul></li><li><p>Slow Path: 自旋失败</p><ul><li>获取锁失败的时候 - 请操作系统帮该线程进入自旋 (实际上也不是进入真正意义上的自旋，自旋空转对性能消耗太大了)</li></ul></li></ul><p>更深入的内容请移步 jyy 老师 <a href="https://jyywiki.cn/OS/2024/lect7.md" target="_blank" rel="noopener noreferrer">本节内容</a> 中的 <strong>7.3 应用程序中的互斥</strong> 一节。 🌶️</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><em>测试优先编程</em> ，详情可见<a href="https://web.mit.edu/6.031/www/sp21/classes/03-testing/#test-first_programming" target="_blank" rel="noopener noreferrer">MIT 6.031 | Reading 3 Testing</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li><li id="footnote2" class="footnote-item"><p><em>写入时复制</em>， 是一种高效管理共享内存的技术，详情可见 [Copy-on-write](<a href="https://en.wikipedia.org/wiki/Copy-on-write" target="_blank" rel="noopener noreferrer">Copy-on-write - Wikipedia</a>) <a href="#footnote-ref2" class="footnote-backref">↩︎</a></p></li></ol></section>',21))])}const v=e(o,[["render",y],["__file","mutex(2).html.vue"]]),F=JSON.parse('{"path":"/zh/note/os/Concurrency/mutex(2).html","title":"并发控制： 互斥(2)","lang":"zh-CN","frontmatter":{"title":"并发控制： 互斥(2)","order":7,"icon":"ban","categories":["操作系统"],"tags":["并发","互斥"],"description":"背景回顾：我们希望通过互斥实现 “stop the world” 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 硬件原子指令 基础上实现了基础版本的自旋锁。 本节内容：如何分别在 操作系统内核 和 用户态应用程序 中实现互斥。 理解并发编程 并发编程中的一些可行抽象 线程 = 人 共享内存 = 物理世...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/note/os/Concurrency/mutex(2).html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"并发控制： 互斥(2)"}],["meta",{"property":"og:description","content":"背景回顾：我们希望通过互斥实现 “stop the world” 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 硬件原子指令 基础上实现了基础版本的自旋锁。 本节内容：如何分别在 操作系统内核 和 用户态应用程序 中实现互斥。 理解并发编程 并发编程中的一些可行抽象 线程 = 人 共享内存 = 物理世..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-22T08:20:26.000Z"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"互斥"}],["meta",{"property":"article:modified_time","content":"2024-11-22T08:20:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发控制： 互斥(2)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-22T08:20:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"codePJCP2\\",\\"url\\":\\"https://docs.pjcp2-personal.cn/zh/\\"}]}"]]},"headers":[{"level":2,"title":"理解并发编程","slug":"理解并发编程","link":"#理解并发编程","children":[{"level":3,"title":"并发编程中的一些可行抽象","slug":"并发编程中的一些可行抽象","link":"#并发编程中的一些可行抽象","children":[]},{"level":3,"title":"互斥需要实现的内容","slug":"互斥需要实现的内容","link":"#互斥需要实现的内容","children":[]},{"level":3,"title":"对锁的正确理解","slug":"对锁的正确理解","link":"#对锁的正确理解","children":[]}]},{"level":2,"title":"操作系统内核中的互斥","slug":"操作系统内核中的互斥","link":"#操作系统内核中的互斥","children":[{"level":3,"title":"回顾：计算机系统的状态机模型","slug":"回顾-计算机系统的状态机模型","link":"#回顾-计算机系统的状态机模型","children":[]},{"level":3,"title":"正确实现互斥","slug":"正确实现互斥","link":"#正确实现互斥","children":[]}]},{"level":2,"title":"操作系统内核中的 (半) 无锁互斥","slug":"操作系统内核中的-半-无锁互斥","link":"#操作系统内核中的-半-无锁互斥","children":[{"level":3,"title":"总结：自旋锁的使用场景","slug":"总结-自旋锁的使用场景","link":"#总结-自旋锁的使用场景","children":[]},{"level":3,"title":"读写不对称现象","slug":"读写不对称现象","link":"#读写不对称现象","children":[]},{"level":3,"title":"RCU (Read-copy-update) 🌶️","slug":"rcu-read-copy-update","link":"#rcu-read-copy-update","children":[]}]},{"level":2,"title":"用户态应用程序中的互斥","slug":"用户态应用程序中的互斥","link":"#用户态应用程序中的互斥","children":[{"level":3,"title":"在用户态应用程序上实现互斥","slug":"在用户态应用程序上实现互斥","link":"#在用户态应用程序上实现互斥","children":[]},{"level":3,"title":"一个非常具有 Scalability 的实现 - <pthread.h>","slug":"一个非常具有-scalability-的实现-pthread-h","link":"#一个非常具有-scalability-的实现-pthread-h","children":[]}]}],"git":{"createdTime":1730723495000,"updatedTime":1732263626000,"contributors":[{"name":"codePJCP2","email":"159783914+codePJCP2@users.noreply.github.com","commits":5}]},"readingTime":{"minutes":12.74,"words":3821},"filePathRelative":"zh/note/os/Concurrency/mutex(2).md","localizedDate":"2024年11月4日","autoDesc":true}');export{v as comp,F as data};
