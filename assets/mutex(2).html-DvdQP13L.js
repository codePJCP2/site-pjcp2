import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,a as i,b as a,e as t,f as e,o as h}from"./app-B-ucrXV9.js";const p={};function k(r,s){return h(),l("div",null,[s[0]||(s[0]=i("blockquote",null,[i("p",null,[a("背景回顾：我们希望通过互斥实现 "),i("em",null,"“stop the world”"),a(" 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 "),i("strong",null,"硬件原子指令"),a(" 基础上实现了基础版本的自旋锁。")])],-1)),s[1]||(s[1]=i("p",null,[a("本节内容：如何分别在 "),i("strong",null,"操作系统内核"),a(" 和 "),i("strong",null,"用户态应用程序"),a(" 中实现互斥。")],-1)),t(" more -"),s[2]||(s[2]=e(`<h2 id="理解并发编程" tabindex="-1"><a class="header-anchor" href="#理解并发编程"><span>理解并发编程</span></a></h2><h3 id="并发编程中的一些可行抽象" tabindex="-1"><a class="header-anchor" href="#并发编程中的一些可行抽象"><span>并发编程中的一些可行抽象</span></a></h3><ul><li><p>线程 = 人</p></li><li><p>共享内存 = 物理世界</p></li><li><p>Everything is 状态机</p></li></ul><h3 id="互斥需要实现的内容" tabindex="-1"><a class="header-anchor" href="#互斥需要实现的内容"><span>互斥需要实现的内容</span></a></h3><ul><li><p><strong>Safety</strong></p><ul><li><p>如果某个线程持有锁，则其他线程的 <code>lock</code> 不能返回 (保证该锁的持久唯一性)</p></li><li><p>能 <strong>正确处理处理器乱序、宽松内存模型和编译优化</strong></p></li><li><p>保证持有锁过程中的修改能够令其余线程 <strong>可见</strong></p></li></ul></li><li><p><strong>Liveness</strong></p><ul><li>在多个线程执行 <code>lock</code> 时，至少有一个可以返回 （否则就会产生死锁现象）</li></ul></li></ul><h3 id="对锁的正确理解" tabindex="-1"><a class="header-anchor" href="#对锁的正确理解"><span>对锁的正确理解</span></a></h3><p><code>lock/unlock</code> 并没有 <em>“stop the world”</em> ：</p><ul><li><p>上锁仅仅只是保护了 <strong>同一把锁</strong> 保护的代码</p><ul><li>思考一下存在 <strong>多把锁</strong> 的情况</li></ul></li><li><p>即使你正确实现了 <code>lock/unlock</code> ，如果锁没有被正确使用，也无法达到预期的 <em>&quot;stop the world&quot;</em> 效果</p><ul><li>线程 <code>T1</code> <code>T2</code> 在访问某一段 Critical Section 前均持有锁，但是另一个线程 <code>T3</code> 在访问同一段代码时并 <strong>没有先尝试获取锁</strong>...</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="data race" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lock_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lock;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// T1 &amp; T2</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spin_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">spin_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// But for T3...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Enters Critical Section without acquiring lock first</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">x</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="操作系统内核中的互斥" tabindex="-1"><a class="header-anchor" href="#操作系统内核中的互斥"><span>操作系统内核中的互斥</span></a></h2><h3 id="回顾-计算机系统的状态机模型" tabindex="-1"><a class="header-anchor" href="#回顾-计算机系统的状态机模型"><span>回顾：计算机系统的状态机模型</span></a></h3><ul><li>初始状态 <ul><li><em>CPU Reset</em></li></ul></li><li>当前状态 <ul><li>共享内存 + 各个 CPU 内维护的寄存器状态</li></ul></li><li>状态迁移 <ul><li>选择任意 CPU <ul><li>取值执行 <strong>or 响应中断</strong></li></ul></li></ul></li></ul><div class="hint-container note"><p class="hint-container-title">🤔 如果在执行 Critical Section 的时候，CPU响应中断了的话，会发生什么情况？</p><ul><li>也许会出现 <strong>还没有 <code>unlock</code> 的时候就被强制执行中断</strong> 的情况</li><li>如果 <strong>中断后有其余进程想要获取访问该 Critical Section 时需要持有的锁</strong> 呢？ <ul><li>死锁的产生 😱</li></ul></li></ul></div><h3 id="正确实现互斥" tabindex="-1"><a class="header-anchor" href="#正确实现互斥"><span>正确实现互斥</span></a></h3><p>我们都知道，中断是每个处理器中 <strong>单独</strong> 的事件。而当中断与多处理器同时存在的时候，就像上节最后的情况一样，要正确实现互斥会变得非常棘手：不仅需要考虑处理器间的互斥，还要考虑各个处理器分别发生的中断。</p><h4 id="编程之前-正确性准则的设定" tabindex="-1"><a class="header-anchor" href="#编程之前-正确性准则的设定"><span>编程之前：正确性准则的设定</span></a></h4><p>当我们接到一个编程任务的时候，我们经常做的第一件事就是 —— IDE，启动！</p><p>然后就开始了库库写代码的过程，写完代码之后 Submit 一下或者 Run 一下，看看对不对，如果不对转头修改或重写。</p><p>这种情况下，我们并没有预先考虑过 <em>&quot;这份代码究竟怎样才算对&quot;</em> ，所以我们总是会在 修改/重写 &lt;-&gt; 验证 这几个步骤之间来回横跳。</p><p>为了减少 <em>&quot;绕圈几率&quot;</em> ， 我们可以在写代码之前预先设定一系列正确性准则来辅助我们验证程序的正确性，这种方式叫做 <strong>&quot;Test-first programming&quot;</strong> <sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p><div class="hint-container info"><p class="hint-container-title">互斥实现的正确性分析</p><p>要设定实现互斥的正确性准则，不妨先从互斥的实现思路开始分析：</p><ul><li><p>既然中断会让互斥的实现变得棘手，那么在需要互斥的时候 <strong>关中断</strong> 不就可以了吗？</p></li><li><p>之后，为了确保互斥真正不被中断打扰，那么每次在上锁之前关闭中断，在解锁后立即开启中断，这样不就解决问题了吗？</p></li></ul></div><p>对于一般情况而言，这种思路是可行的，因为一般情况下进入 Critical Section 的时候，原有的中断状态是开启的，在解锁时候立即开启中断并不会修改进入前后的中断开启状态。</p><p>但是对于 <strong>中断处理程序</strong> 等特殊程序而言，为了防止处理中断的过程中再次发生中断，而导致的中断处理程序的重入或执行混乱，中断处理程序通常会在程序执行入口点关闭中断，直到中断处理程序执行完成之后再重启中断。这种机制确保了中断处理的原子性和系统的稳定性。</p><p>这种情况下，上述的互斥实现思路就出现了问题 —— 中断处理程序在进入某一段 Critical Section 之后 (此时中断处理程序 <strong>非常有可能尚未执行完成</strong>) ，它的中断被 <strong>打开</strong> 了。这显然不是我们期望的结果 —— 我们希望执行完 Critical Section 之后，中断处理程序的中断仍然是关闭的。</p><p>由此，第一条正确性准则就这么被分析出来了 —— <strong>上锁/解锁前后中断状态不变</strong>。</p><p>这条正确性原则的内容包括：</p><ul><li>不得在关中断时随意打开中断 (例如处理中断时)</li><li>不得随意关闭中断 (否则可能导致中断丢失)</li></ul><p>实际编程的过程中，我们也很有可能遇到 Critical Section 套 Critical Section 的情况，例如需要对一个数据结构上的某几个端点进行上锁，之后进行原子修改的情况。</p><p>比如说，你需要 lock 一个 (子) 树的根结点与左右结点。这种情况下你想要让对 <strong>两个结点</strong> （子左 &amp; 子右）的修改都被锁保护住，因此你可能会写出与下面的代码类似的代码：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="Nesting of locks" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">lock_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a, b, c;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// The following code can&#39;t be interrupted</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// otherwise it may result in deadlocks</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section For b...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_lock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Critical Section For c...</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mutex_unlock</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果真的沿用上面分析的实现思路来实现并发，那么在与上面的代码类似的 <strong>&quot;锁嵌套&quot;</strong> 情形中，有极大可能会出现死锁的情况。</p><p>为了解决这种问题，我们希望在整个 <strong>&quot;锁嵌套&quot;</strong> 情形中，整个处理器的中断状态 (即对应的 <em>IF Bit</em>) 不进行改变，达到原子迁移的效果。</p><p>要在一系列 Critical Section 执行完毕 (这里特指 <strong>&quot;所有锁释放完成&quot;</strong>) 后，恢复处理器的中断状态。</p><div class="hint-container tip"><p class="hint-container-title">思考</p><p>想要恢复中断状态，势必需要将一个待恢复的状态存于某处。</p><p>那么它应该存储在哪里呢？ 🤔</p><ul><li>共享内存 ?</li><li>各 CPU 内部 ?</li><li>各线程内部 ?</li></ul></div><h4 id="中断的保存与恢复" tabindex="-1"><a class="header-anchor" href="#中断的保存与恢复"><span>中断的保存与恢复</span></a></h4><p>由于 <code>lock</code> 和 <code>unlock</code> 通常都是成对出现的，就跟 <code>()</code> <code>[]</code> 等成对的符号一样。我们可以借助这一特性来完成对中断的恢复操作。</p><p>我们可以把 <code>lock</code> 与 <code>unlock</code> 的操作抽象为对一个 <strong>&quot;锁堆栈&quot;</strong> 的操作：</p><ul><li>每当 <code>lock</code> 的时候，将 **(抽象的)**锁状态 <code>push</code> 进锁堆栈</li><li>当出现 <code>unlock</code> 操作的时候，将栈顶的锁 <code>pop</code> 出锁堆栈</li><li>如果栈为空，说明当前所有的锁均已被释放，此时便可将中断状态 <code>IF Bits</code> 恢复为原先的状态。</li></ul><p>下面这段代码模拟了对 <strong>&quot;锁堆栈&quot;</strong> 的 <code>push</code> 与 <code>pop</code> 操作：</p><div class="language-c line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="c" data-title="从 xv-6 偷来的自旋锁实现" style="--vp-collapsed-lines:20;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Other codes are hidden.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// push_off/pop_off are like intr_off()/intr_on()</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// except that they are matched:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// it takes two pop_off()s to undo two push_off()s.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Also, if interrupts are initially off, then</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// push_off, pop_off leaves them off.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> push_off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ienabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cpu </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mycpu;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    iset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">intena</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> old;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> pop_off</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> cpu </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> mycpu;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // Never enable interrupt when holding a lock.</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ienabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pop_off - interruptible&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        panic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;pop_off&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">noff</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">intena</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        iset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="footnote1" class="footnote-item"><p><em>测试优先编程</em> ，详情可见<a href="https://web.mit.edu/6.031/www/sp21/classes/03-testing/#test-first_programming" target="_blank" rel="noopener noreferrer">MIT 6.031 | Reading 3 Testing</a> <a href="#footnote-ref1" class="footnote-backref">↩︎</a></p></li></ol></section>`,41))])}const c=n(p,[["render",k],["__file","mutex(2).html.vue"]]),g=JSON.parse('{"path":"/zh/note/os/Concurrency/mutex(2).html","title":"并发控制： 互斥(2)","lang":"zh-CN","frontmatter":{"title":"并发控制： 互斥(2)","icon":"book","categories":["操作系统"],"tags":["并发","互斥"],"description":"背景回顾：我们希望通过互斥实现 “stop the world” 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 硬件原子指令 基础上实现了基础版本的自旋锁。 本节内容：如何分别在 操作系统内核 和 用户态应用程序 中实现互斥。 理解并发编程 并发编程中的一些可行抽象 线程 = 人 共享内存 = 物理世...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/zh/note/os/Concurrency/mutex(2).html"}],["meta",{"property":"og:site_name","content":"文档演示"}],["meta",{"property":"og:title","content":"并发控制： 互斥(2)"}],["meta",{"property":"og:description","content":"背景回顾：我们希望通过互斥实现 “stop the world” 的并发控制。在许多在共享内存上实现互斥的失败和成功尝试后，我们意识到软件需要和硬件协同工作，并在 硬件原子指令 基础上实现了基础版本的自旋锁。 本节内容：如何分别在 操作系统内核 和 用户态应用程序 中实现互斥。 理解并发编程 并发编程中的一些可行抽象 线程 = 人 共享内存 = 物理世..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-04T12:31:35.000Z"}],["meta",{"property":"article:tag","content":"并发"}],["meta",{"property":"article:tag","content":"互斥"}],["meta",{"property":"article:modified_time","content":"2024-11-04T12:31:35.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"并发控制： 互斥(2)\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-04T12:31:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"codePJCP2\\",\\"url\\":\\"https://docs.pjcp2-personal.cn/zh/\\"}]}"]]},"headers":[{"level":2,"title":"理解并发编程","slug":"理解并发编程","link":"#理解并发编程","children":[{"level":3,"title":"并发编程中的一些可行抽象","slug":"并发编程中的一些可行抽象","link":"#并发编程中的一些可行抽象","children":[]},{"level":3,"title":"互斥需要实现的内容","slug":"互斥需要实现的内容","link":"#互斥需要实现的内容","children":[]},{"level":3,"title":"对锁的正确理解","slug":"对锁的正确理解","link":"#对锁的正确理解","children":[]}]},{"level":2,"title":"操作系统内核中的互斥","slug":"操作系统内核中的互斥","link":"#操作系统内核中的互斥","children":[{"level":3,"title":"回顾：计算机系统的状态机模型","slug":"回顾-计算机系统的状态机模型","link":"#回顾-计算机系统的状态机模型","children":[]},{"level":3,"title":"正确实现互斥","slug":"正确实现互斥","link":"#正确实现互斥","children":[]}]}],"git":{"createdTime":1730723495000,"updatedTime":1730723495000,"contributors":[{"name":"codePJCP2","email":"159783914+codePJCP2@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.72,"words":2017},"filePathRelative":"zh/note/os/Concurrency/mutex(2).md","localizedDate":"2024年11月4日","autoDesc":true}');export{c as comp,g as data};
